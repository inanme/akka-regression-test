akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = DEBUG
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off
  actor {
    debug {
      receive = on
      autoreceive = on
      fsm = on
      lifecycle = on
      unhandled = false
      event-stream = on
      router-misconfiguration = on
    }

    deployment {
      /my-random-router {
        router = random-pool
        nr-of-instances = 3
      }
    }
  }


  persistence {
    at-least-once-delivery {
      # Interval between re-delivery attempts.
      redeliver-interval = 15s
      # Maximum number of unconfirmed messages that will be sent in one
      # re-delivery burst.
      redelivery-burst-limit = 3
      # After this number of delivery attempts a
      # `ReliableRedelivery.UnconfirmedWarning`, message will be sent to the actor.
      warn-after-number-of-unconfirmed-attempts = 2
      # Maximum number of unconfirmed messages that an actor with
      # AtLeastOnceDelivery is allowed to hold in memory.
      max-unconfirmed-messages = 5
    }
  }

  //    persistence {
  //      journal {
  //        plugin = "leveldb"
  //
  //        leveldb {
  //          dir = "target/persistence/journal"
  //        }
  //      }
  //      snapshot-store.local.dir = "target/persistence/snapshots"
  //    }

}

receiver {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-config-on-start = off
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote.artery {
      canonical {
        hostname = host01
        port = 2551
      }
    }
  }
}

sender {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-config-on-start = off
    actor {
      provider = "akka.remote.RemoteActorRefProvider"
    }
    remote.artery {
      canonical {
        hostname = host02
        port = 2551
      }
    }
  }
}

node1 {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-config-on-start = off
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote.artery {
      canonical {
        hostname = host01
        port = 2551
      }
    }
    cluster {
      seed-nodes = [
        "akka://words@host01:2551",
        "akka://words@host02:2551",
        "akka://words@host03:2551"
      ]
      roles = ["seed"]
      role {
        seed.min-nr-of-members = 2
      }
    }
  }
}

node2 {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-config-on-start = off
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote.artery {
      canonical {
        hostname = host02
        port = 2551
      }
    }
    cluster {
      seed-nodes = [
        "akka://words@host01:2551",
        "akka://words@host02:2551",
        "akka://words@host03:2551"
      ]
      roles = ["seed"]
      role {
        seed.min-nr-of-members = 2
      }
    }
  }
}

node3 {
  akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = DEBUG
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
    log-config-on-start = off
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote.artery {
      canonical {
        hostname = host03
        port = 2551
      }
    }
    cluster {
      seed-nodes = [
        "akka://words@host01:2551",
        "akka://words@host02:2551",
        "akka://words@host03:2551"
      ]
      roles = ["seed"]
      role {
        seed.min-nr-of-members = 2
      }
    }
  }
}

cluxter {
  akka {
    loglevel = INFO
    stdout-loglevel = INFO
    event-handlers = ["akka.event.Logging$DefaultLogger"]
    log-dead-letters = 0
    log-dead-letters-during-shutdown = off
    actor {
      provider = "akka.cluster.ClusterActorRefProvider"
    }
    remote {
      enabled-transports = ["akka.remote.netty.tcp"]
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = ${?HOST}
        port = 2551
      }
    }
    cluster {
      seed-nodes = [
        "akka://words@host01:2551",
        "akka://words@host02:2551",
        "akka://words@host03:2551"
      ]
      roles = ["seed"]
      role {
        seed.min-nr-of-members = 2
      }
    }
  }
}

scanner {
  file-reader {
    directoryPath = /dictionaries
  }
}
